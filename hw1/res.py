(module (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (none)) (type (none))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (false))) (while_statement condition: (true) body: (block (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (yield (attribute object: (identifier) attribute: (identifier)))) (if_statement condition: (not_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (expression_statement (assignment left: (identifier) right: (true)))))) alternative: (elif_clause condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) consequence: (block (expression_statement (assignment left: (identifier) right: (false))))) alternative: (elif_clause condition: (not_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (break_statement)))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier) (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (unary_operator argument: (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (binary_operator left: (identifier) right: (integer)) (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (integer)) right: (call function: (identifier) arguments: (argument_list (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (identifier) (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (identifier)))))) (return_statement (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (subscript value: (identifier) subscript: (slice (identifier) (attribute object: (identifier) attribute: (identifier)))) attribute: (identifier)) arguments: (argument_list (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (subscript value: (identifier) subscript: (slice (identifier))) attribute: (identifier)) arguments: (argument_list (integer)))))) (return_statement (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_clause (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier))))) (if_statement condition: (parenthesized_expression (boolean_operator left: (boolean_operator left: (comparison_operator (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier)))) right: (parenthesized_expression (boolean_operator left: (call function: (attribute object: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (unary_operator argument: (integer))) attribute: (identifier)) arguments: (argument_list)) right: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (unary_operator argument: (integer))) (string (string_start) (string_content) (string_end)))))) right: (parenthesized_expression (boolean_operator left: (call function: (attribute object: (subscript value: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) subscript: (integer)) attribute: (identifier)) arguments: (argument_list)) right: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) subscript: (integer)) (string (string_start) (string_content) (string_end))))))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (return_statement (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (return_statement (subscript value: (identifier) subscript: (slice (identifier)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (identifier)))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (return_statement (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (slice (identifier) (attribute object: (identifier) attribute: (identifier)))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier) (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (unary_operator argument: (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (binary_operator left: (identifier) right: (integer)) (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (return_statement (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (boolean_operator left: (identifier) right: (none))))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (none)) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (boolean_operator left: (identifier) right: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (return_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (return_statement (none)))) (return_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (identifier))))))) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (boolean_operator left: (identifier) right: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (return_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (return_statement (none)))) (return_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier))))))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (none))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (integer))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (generic_type (identifier) (type_parameter (type (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier))))) (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (attribute object: (identifier) attribute: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_end)))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (integer))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (boolean_operator left: (identifier) right: (none)))) (typed_parameter (identifier) type: (type (identifier))) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none)) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none)) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement)) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) right: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (else_clause body: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (comment))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier))) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))) attribute: (identifier)))) (identifier)))))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (continue_statement))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) (comment) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))) attribute: (identifier))))))) (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (list_splat_pattern (identifier)) (dictionary_splat_pattern (identifier))) body: (block (return_statement))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (keyword_argument name: (identifier) value: (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier))) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none))) return_type: (type (boolean_operator left: (identifier) right: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (comment) (comment) (comment) (comment) (comment) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement (none)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))) (return_statement (none)))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (if_statement condition: (named_expression name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) consequence: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)) (identifier)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (identifier)))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)) (identifier)))))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (identifier) (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (identifier)))))) (return_statement (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))
b'Scope' (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (boolean_operator left: (identifier) right: (none))))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (none)) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (boolean_operator left: (identifier) right: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (return_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (return_statement (none)))) (return_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (identifier))))))) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (boolean_operator left: (identifier) right: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (return_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (return_statement (none)))) (return_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))))))
b'Change' (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier))))))
b'NamesReplacer' (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (none))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (integer))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (generic_type (identifier) (type_parameter (type (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier))))) (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (attribute object: (identifier) attribute: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_end)))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (integer))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (boolean_operator left: (identifier) right: (none)))) (typed_parameter (identifier) type: (type (identifier))) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none)) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none)) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement)) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) right: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (else_clause body: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier))) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))) attribute: (identifier)))) (identifier)))))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (continue_statement))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))) attribute: (identifier))))))) (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (list_splat_pattern (identifier)) (dictionary_splat_pattern (identifier))) body: (block (return_statement))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (keyword_argument name: (identifier) value: (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier))) (typed_default_parameter name: (identifier) type: (type (generic_type (identifier) (type_parameter (type (list (identifier) (identifier))) (type (none))))) value: (none))) return_type: (type (boolean_operator left: (identifier) right: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement (none)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))) (return_statement (none)))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (if_statement condition: (named_expression name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) consequence: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)) (identifier)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (identifier)))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)) (identifier))))))))))
import os
import sys
from dataclasses import dataclass
from typing import Generator,Self,Callable

from tree_sitter import Language,Node,Parser,Tree

Language.build_library(
    "build/my-languages.so",
    [os.path.join(os.getcwd(),"tree-sitter-python")],
)

name_0=Language("build/my-languages.so", "python")


def name_1(name_2:Tree)->Generator[Node,None,None]:
    name_3=name_2.walk()

    name_4=False
    while True:
        if not name_4:
            yield name_3.node
            if not name_3.goto_first_child():
                name_4=True
        elif name_3.goto_next_sibling():
            name_4=False
        elif not name_3.goto_parent():
            break


def name_5(name_6:str)->str:
    name_7=[]
    name_8=Parser()
    name_8.set_language(name_0)
    name_9=name_8.parse(bytes(name_6,"utf-8"))
    print(name_9.root_node.sexp())
    name_10=0
    for name_11 in name_1(name_9):
        if name_11.type=="comment":
            name_12=name_6.rfind("\n",name_10,name_11.start_byte)
            if name_12==-1:
                name_12=name_10

            name_13=name_6[name_12+1:name_11.start_byte]
            if name_13.strip()=="":
                name_7.append(name_6[name_10:name_12])
                name_10=name_12+1+len(name_13)

            name_7.append(name_6[name_10:name_11.start_byte])
            name_10=name_11.end_byte

    name_7.append(name_6[name_10:])
    return"".join(name_7)


def name_14(name_15:str)->str:
    name_16=[]
    name_17=Parser()
    name_17.set_language(name_0)
    name_18=name_17.parse(bytes(name_15,"utf-8"))

    name_19=0
    for name_20 in name_1(name_18):
        if name_20.type=="string":
            name_16.append(
                name_15[name_19:name_20.start_byte].expandtabs(4))
            name_16.append(name_15[name_20.start_byte:name_20.end_byte])
            name_19=name_20.end_byte
    name_16.append(name_15[name_19:].expandtabs(4))
    return"".join(name_16)


def name_21(name_22:str)->str:
    name_23=[]
    name_24=[word for word in name_22.split()if word]
    for name_25 in range(len(name_24)):
        name_23.append(name_24[name_25])
        if(
            name_25+1<len(name_24)
            and(name_24[name_25][-1].isalnum()or name_24[name_25][-1]=="_")
            and(name_24[name_25+1][0].isalnum()or name_24[name_25+1][0]=="_")
        ):
            name_23.append(" ")
    return"".join(name_23)


def name_26(name_27:str)->str:
    name_28=0
    for name_29 in name_27:
        if name_29!=" ":
            break
        name_28+=1
    return name_27[:name_28]


def name_30(name_31:str)->str:
    name_32=[]
    for name_33 in name_31.split(os.linesep):
        name_34=name_21(name_33)
        if name_34:
            name_32.append(name_26(name_33)+name_34)
        else:
            name_32.append(name_34)
    return"\n".join(name_32)


def name_35(name_36:str)->str:
    name_37=[]
    name_38=Parser()
    name_38.set_language(name_0)
    name_39=name_38.parse(bytes(name_36,"utf-8"))

    name_40=0
    name_41=False
    for name_42 in name_1(name_39):
        if name_42.type=="string":
            name_41=True
            name_43=name_36[name_40:name_42.start_byte].lstrip(" ")
            name_37.append(name_30(name_43))

            name_44=name_36.rfind("\n",name_40,name_42.start_byte)
            if name_44==-1:
                name_44=name_40
            name_45=name_36[name_44+1:name_42.start_byte]
            if name_45.strip()=="":
                name_37.append(name_45)

            name_46=name_36[name_42.start_byte:name_42.end_byte]
            name_37.append(name_46)

            name_40=name_42.end_byte

    name_47=name_36[name_40:]
    if name_41:
        name_47=name_47.lstrip()

    name_37.append(name_30(name_47))
    return"".join(name_37)


class name_48:
    def __init__(name_49,name_50:Self or None):
        name_49.name_61=name_50
        name_49.name_62=dict()
        name_49.name_63=dict()

    def insert(name_51,name_52:str,name_53:str)->None:
        name_51.name_62[name_52]=name_53

    def get(name_54,name_55:str)->str or None:
        if name_55 in name_54.name_62:
            return name_54.name_62[name_55]
        if name_54.name_61 is None:
            return None
        return name_54.name_61.get(name_55)

    def insert_namespace(name_56,name_57:str,name_58:dict[str,str]):
        name_56.name_63[name_57]=name_58

    def get_namespace(name_59,name_60:str)->Self or None:
        if name_60 in name_59.name_63:
            return name_59.name_63[name_60]
        if name_59.name_61 is None:
            return None
        return name_59.name_61.get_namespace(name_60)


@dataclass
class name_64:
    name_65:int
    name_66:int
    name_67:str


class name_68:
    def __init__(name_69):
        name_69.name_108=name_48(None)
        name_69.name_109=[]
        name_69.name_110=0

    def make_changes(name_70,name_71:Tree)->list[name_64]:
        name_111=name_71.root_node
        name_70._visit(name_111,name_70.name_108)
        return sorted(name_70.name_109,key=lambda change:change.start_byte)

    def _create_new_name(name_72)->str:
        name_112=f"name_{name_72.name_110}"
        name_72.name_110+=1
        return name_112

    def _visit(
        name_73,
        name_74:Node or None,
        name_75:name_48,
        name_76:Callable[[Node,name_48],None]=None,
        name_77:Callable[[Node,name_48],None]=None,
        name_78:Callable[[Node,name_48],None]=None,
    ):
        if name_76 is None:
            name_76=name_73._rename_identifier
        if name_77 is None:
            name_77=name_73._visit_function_definition

        if name_74 is None:
            return
        elif name_74.type=="class_definition":
            name_73._visit_class_definition(name_74,name_75)
        elif name_74.type=="function_definition":
            name_77(name_74,name_75)
        elif name_74.type=="for_statement":
            name_73._visit_for_statement(name_74,name_75)
        elif name_74.type=="assignment":
            name_73._visit_assignment(name_74,name_75)
        elif name_74.type=="attribute":
            name_73._visit_attribute(name_74,name_75,name_76)
        elif name_74.type=="call":
            name_73._visit_call(name_74,name_75)
        elif name_74.type=="keyword_argument"and name_78:
            name_78(name_74,name_75)
        elif name_74.type=="typed_parameter":
            name_73._visit_typed_parameter(name_74,name_75,name_76)
        elif name_74.type=="type":
            for name_113 in name_74.children:
                name_73._visit(name_113,name_75)
        elif name_74.type=="identifier":
            name_76(name_74,name_75)
        else:
            for name_113 in name_74.children:
                name_73._visit(
                    name_113,
                    name_75,
                    name_76=name_76,
                    name_77=name_77,
                    name_78=name_78,
                )

    def _visit_function_definition(name_79,name_80:Node,name_81:name_48):
        name_114=name_80.child_by_field_name("name")
        name_79._define_and_rename_identifier(name_114,name_81)
        name_115=name_48(name_81)
        name_116=name_48(name_115)
        name_117=name_80.child_by_field_name("parameters")
        name_79._visit(name_117,name_115,
                    name_79._define_and_rename_identifier)
        name_81.insert_namespace(str(name_114.text),name_115)
        name_79._visit(name_80.child_by_field_name("return_type"),name_81)
        name_79._visit(name_80.child_by_field_name("body"),name_116)

    def _visit_typed_parameter(
        name_82,
        name_83:Node,
        name_84:name_48,
        name_85:Callable[[Node,name_48],None]=None,
    ):
        name_118=name_83.child_by_field_name("type")
        if name_118.type=="identifier":
            name_119=name_84.get_namespace(str(name_118.text))
            name_84.insert_namespace(str(name_83.child(0).text),name_119)

        for name_120 in name_83.children:
            name_82._visit(name_120,name_84,name_76=name_85)

    def _visit_call(name_86,name_87:Node,name_88:name_48):
        name_121=name_87.child_by_field_name("function")
        if name_121.type=="attribute":
            name_122=name_86._visit_attribute(name_121,name_88)
        elif name_121.type=="identifier":
            name_86._visit(name_121,name_88)
            name_122=name_88.get_namespace(str(name_121.text))
        else:
            raise RuntimeError(f"Wrong function type: `{name_121.text}`")

        def name_123(name_87:Node,name_88:name_48):
            if name_122:
                name_124=name_87.child_by_field_name("name")
                name_86._visit(name_124,name_122)
            name_125=name_87.child_by_field_name("value")
            name_86._visit(name_125,name_88)

        name_126=name_87.child_by_field_name("arguments")
        name_86._visit(name_126,name_88,
                    name_78=name_123)

    def _visit_class_definition(name_89,name_90:Node,name_91:name_48):
        print(name_90.child_by_field_name("name").text,name_90.sexp())
        name_127=name_90.child_by_field_name("name")
        name_89._define_and_rename_identifier(name_127,name_91)

        name_89._visit(name_90.child_by_field_name("superclasses"),name_91)

        name_128=name_48(name_91)
        name_91.insert_namespace(str(name_127.text),name_128)

        name_129=name_90.child_by_field_name("body").children_by_field_name(
            "function_definition"
        )
        name_130=[]
        for name_131 in name_129:
            if name_131.type!="function_definition":
                continue

            def name_132(name_90:Node)->str:
                if name_90.type=="typed_parameter":
                    return str(name_90.child(0).text)
                return str(name_90.text)

            name_127=name_131.child_by_field_name("name")
            name_133=name_48(name_91)
            name_134=name_48(name_133)
            name_130.append(name_134)

            name_135=name_131.child_by_field_name("parameters")
            name_136=name_132(name_135.child(1))
            name_91.insert_namespace(name_136,name_128)

            name_89._visit(
                name_135,name_133,name_89._define_and_rename_identifier
            )
            name_91.insert_namespace(str(name_127.text),name_133)
            name_89._visit(name_131.child_by_field_name("return_type"),name_91)

        for name_131,name_137 in zip(name_129,name_130):
            name_89._visit(name_131.child_by_field_name("body"),name_137)

        def name_138(*name_139,**name_140):
            return

        name_89._visit(
            name_90.child_by_field_name("body"),
            name_128,
            name_77=name_138,
        )

    def _visit_assignment(name_92,name_93:Node,name_94:name_48):
        name_92._visit(
            name_93.child_by_field_name("left"),
            name_94,
            name_76=name_92._define_and_rename_identifier,
        )
        name_92._visit(name_93.child_by_field_name("type"),name_94)
        name_92._visit(name_93.child_by_field_name("right"),name_94)

    def _visit_attribute(
        name_95,
        name_96:Node,
        name_97:name_48,
        name_98:Callable[[Node,name_48],None]=None,
    )->name_48 or None:
        if name_98 is None:
            name_98=name_95._rename_identifier
        if name_96.type=="identifier":
            if name_97 is None:
                return None
            name_98(name_96,name_97)
            return name_97.get_namespace(str(name_96.text))
        elif name_96.type=="attribute":
            name_141=name_95._visit_attribute(
                name_96.child_by_field_name("object"),name_97,name_98
            )
            if name_141:
                name_142=name_96.child_by_field_name("attribute")
                name_98(name_142,name_141)
                return name_97.get_namespace(str(name_142.text))
        else:
            name_95._visit(name_96,name_97)
        return None

    def _visit_for_statement(name_99,name_100:Node,name_101:name_48):
        name_99._visit(
            name_100.child_by_field_name("left"),
            name_101,
            name_76=name_99._define_and_rename_identifier,
        )
        name_99._visit(name_100.child_by_field_name("right"),name_101)
        name_143=name_48(name_101)
        name_99._visit(name_100.child_by_field_name("body"),name_143)

    def _rename_identifier(name_102,name_103:Node,name_104:name_48):
        if new_name:=name_104.get(name_103.text):
            name_102.name_109.append(
                name_64(name_103.start_byte,name_103.end_byte,new_name))

    def _define_and_rename_identifier(name_105,name_106:Node,name_107:name_48):
        name_144=name_107.get(name_106.text)or name_105._create_new_name()
        name_107.insert(name_106.text,name_144)
        name_105.name_109.append(name_64(name_106.start_byte,name_106.end_byte,name_144))


def name_145(name_146:str)->str:
    name_147=[]
    name_148=Parser()
    name_148.set_language(name_0)
    name_149=name_148.parse(bytes(name_146,"utf-8"))

    name_150=name_68().make_changes(name_149)
    name_151=0
    for name_152 in name_150:
        name_147.append(name_146[name_151:name_152.start_byte])
        name_147.append(name_152.replacement)
        name_151=name_152.end_byte
    name_147.append(name_146[name_151:])

    return"".join(name_147)


name_153=sys.stdin.read()
name_153=name_5(name_153)
name_153=name_14(name_153)
name_153=name_35(name_153)
name_153=name_145(name_153)
print(name_153)

